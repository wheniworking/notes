createdAt: "2019-09-04T08:10:10.215Z"
updatedAt: "2019-09-04T09:36:40.496Z"
type: "MARKDOWN_NOTE"
folder: "b54907bec9ebd1910d19"
title: "性能调优"
tags: []
content: '''
  ## 性能调优
  
  
  ### 为什么做性能调优
   - 提升系统性能
   - 节省资源
  
  ### 什么时候介入性能调优
  
  - 项目初期没有必要过分在意性能优化
    - 只需要在代码层面保证有效的编码。例如，减少磁盘IO操作，降低竞争锁的使用以及选择使用高效的算法。遇到复杂的业务逻辑，充分利用设计模式等。
    - 系统编码完成之后，就可以对系统进行性能测试了。
    - 项目成功上线之后，要根据线上的实际情况，根据日志监控和性能统计信息来观测性能问题，及时处理。
  
  ### 与性能有关的计算机资源
   - CPU。有的应用需要大量计算，会长时间，不间断的占用CPU资源，导致其他资源无法争夺到CPU而响应缓慢，从而带来性能问题。例如，无限循环，正则表达式回溯，JVM FullGCC，频繁的上下文切换等等。
   - 内存。内存空间被占满，对象无法回收，导致内存溢出，内存泄漏等。
   - 磁盘IO。磁盘相比内存而言，空间大很多，但是磁盘IO读写速度要比内存慢很多。
   - 网络。网络带宽过低的话，对于数据传输比较大的情况，或者是并发量比较大的系统，网络就很容易成为性能瓶颈。
   - 异常。Java 应用中，抛出异常需要构建异常栈，对异常进行捕获和处理，这个过程非常消耗系统性能。如果是在高并发的情况下引发异常，持续的进行异常处理，那么系统的性能就会明显的收到影响。
   - 数据库。数据库的操作往往涉及到磁盘的IO读写。大量的数据库读写操作，会导致磁盘IO的性能瓶颈，进而导致数据库操作延迟。对于有大量数据库读写操作的系统而言，数据库的性能优化是整个系统的核心。
   - 所竞争。并发编程中，多个线程共享同一个资源。为了保证线程安全，就会对共享资源进行加锁操作。锁的使用可能带来CPU的上下文切换，从而给系统带来性能开销。
  
  ### 性能指标
  
  - 响应时间
  - 吞吐量。TPS(每秒事务量)，TPS越大越好
    - 磁盘吞吐量
    - 网络吞吐量
  - 计算机资源使用率
    - CPU占用率
    - 内存使用率
    - 磁盘I/O
    - 网络I/O
  
  ### 性能测试 --> 分析 --> 调优
  
  #### 性能测试
  
  性能测试是提前发现性能瓶颈，保障系统稳定的必要措施。
  
  - 微基准性能测试
  - 宏基准性能测试
  
  #### 分析问题
  
  
  我们在完成性能测试之后，需要输出一份性能测试报告，帮我们分析系统性能测试的情况。其中测试结果需要包含测试接口的平均、最大和最小吞吐量，响应时间，服务器的  CPU、内存、I/O、网络  IO  使用率，JVM  的  GC  频率等。
  
  通过观察这些调优标准，可以发现性能瓶颈，我们再通过自下而上的方式分析查找问题。首先从操作系统层面，查看系统的  CPU、内存、I/O、网络的使用率是否存在异常，再通过命令查找异常日志，最后通过分析日志，找到导致瓶颈的原因；还可以从  Java  应用的  JVM  层面，查看  JVM  的垃圾回收频率以及内存分配情况是否存在异常，分析日志，找到导致瓶颈的原因。
  
  如果系统和  JVM  层面都没有出现异常情况，我们可以查看应用服务业务层是否存在性能瓶颈，例如  Java  编程的问题、读写数据瓶颈等等。
  
  
  分析查找问题是一个复杂而又细致的过程，某个性能问题可能是一个原因导致的，也可能是几个原因共同导致的结果。我们分析查找问题可以采用自下而上的方式，而我们解决系统性能问题，则可以采用自上而下的方式逐级优化。下面我来介绍下从应用层到操作系统层的几种调优策略。
  
  
  ## 
  - 优化代码
  - 优化设计
  - 优化算法
  - 空间和时间互换
  - 兜底策略
    - 限流
    - 水平扩容
    - 提前扩容
  
  
  
  
  
  
  
  
  
  
  
'''
linesHighlighted: []
isStarred: false
isTrashed: false
